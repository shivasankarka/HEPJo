# Will define traits here, empty for now

# trait vector_trait:
#     fn __init__(inout self):
#         ...
#     fn __copyinit__(inout self, new: Self):
#         ...
#     fn __moveinit__(inout self, owned existing: Self):
#         ...
#     fn __getitem__(inout self, index:Int):
#         ...
#     fn __setitem__(inout self, index:Int, value:Scalar):
#         ...
#     fn __del__(owned self):
#         ...
#     fn __len__(self) -> Int:
#         ...
#     fn __int__(self) -> Int:
#         ...
#     fn __str__(inout self) -> String:
#         ...
#     fn __repr__(inout self) -> String:
#         ...
#     fn __pos__(inout self) -> Self:
#         ...
#     fn __neg__(inout self) -> Self:
#         ...
#     fn __eq__(self, other: Self) -> Bool:
#         ...
#     fn __add__(inout self, other:Scalar[dtype]) -> Self:
#         ...
#     fn __add__(inout self, other:Self) -> Self:
#         ...
#     fn __radd__(inout self, s: Scalar[dtype])->Self:
#         ...
#     fn __iadd__(inout self, s: Scalar[dtype]):
#         ...
#     fn __sub__(inout self, other:Scalar[dtype]) -> Self:
#         ...
#     fn __sub__(inout self, other:Self) -> Self:
#         ...
#     fn __rsub__(inout self, s: Scalar[dtype]) -> Self:
#         ...
#     fn __isub__(inout self, s: Scalar[dtype]):
#         ...
#     fn __mul__(self, s: Scalar[dtype])->Self:
#         ...
#     fn __mul__(self, other: Self)->Self:
#         ...
#     fn __rmul__(self, s: Scalar[dtype])->Self:
#         ...
#     fn __imul__(inout self, s: Scalar[dtype]):
#         ...
#     fn __truediv__(self, s: Scalar[dtype])->Self:
#         ...
#     fn __truediv__(self, other: Self)->Self:
#         ...
#     fn __rtruediv__(self, s: Scalar[dtype])->Self:
#         ...
#     fn __itruediv__(inout self, s: Scalar[dtype]):
#         ...
#     fn __itruediv__(inout self, other: Self):
#         ...
#     fn __pow__(self, p: Int)->Self:
#         ...
#     fn __ipow__(inout self, p: Int):
#         ...
#     fn __matmul__(inout self, other:Self) -> Scalar[dtype]:
#         ...
    
